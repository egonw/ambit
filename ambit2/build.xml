<project name="ambit2" default="all" basedir=".">
    <property name="version" value="2.0" />

    <!-- compile options -->
    <property name="build.sysclasspath" value="ignore" />
    <property name="build.compiler" value="modern" />
    <property name="debug" value="on" />
    <property name="deprecation" value="off" />
    <property name="optimization" value="off" />

    <!-- directories -->
    <property name="build" value="bin" /> <!-- *.classes built -->
    <property name="sourcedist"	value="sourcedist" />
    <property name="dist" value="dist" /> <!-- Folder to store generated jars -->
    <property name="doc" value="doc" /> <!-- javadoc -->
    <property name="src" value="src" /> <!-- Source -->
    <property name="lib" value="lib" /> <!-- Third party jars (cdk, junit, etc.) -->

	<property name="test.reports" value="reports" />  <!-- Folder to store junit test reports -->


	<!-- Used when signing jars (Thawte freemail cert) -->
    <property name="keystore" value="../certificates/keystore/keystore.ks" />

    <!-- CLASSPATH -->
    <path id="project.class.path">
	    <pathelement location="${java.ext.dirs}/rt.jar" />
	    <fileset dir="${lib}">
			<include name="*.jar" />
	    </fileset>
    </path>

	<path id="test.class.path">
	  <pathelement location="${build}" />
	  <fileset dir="${lib}">
	    <include name="**/*.jar"/>
	  </fileset>
	</path>

    <target id="info" name="info" depends="check">
        <!-- Gives information about the building process. -->
        <echo message="Platform:" />
        <echo message="             OS: ${os.name}" />
        <echo message="   Architecture: ${os.arch}" />
        <echo message="        Version: ${os.version}" />
        <echo message=" Mac OS/X found: ${isMacOsX}" />
        <echo message="" />
        <echo message="Java/Ant Environment:" />
        <echo message="   Java version: ${java.version}" />
        <echo message="    Java vendor: ${java.vendor}" />
        <echo message="       Java dir: ${java.home}" />
        <echo message="   Java ext dir: ${java.ext.dirs}" />
        <echo message="    Ant version: ${ant.version}" />
        <echo message="    ${ANT_HOME}: ${ant.home}" />
        <echo message="       hasAnt16: ${hasAnt16}" />
        <echo message="" />
        <echo message="    AMBIT version: ${version}" />
        <echo message="      build.xml: $Id: build.xml,v 2.0 nina@acad.bg$" />
        <echo message="  Doclets found: ${docletsAreCompiled}" />
        <echo message="" />
        <echo message="Compiling:" />
        <echo message="            for: ${build.compiler}" />
        <echo message="          debug: ${debug}" />
        <echo message="    deprecation: ${deprecation}" />
        <echo message="   optimization: ${optimization}" />
        <echo message="     skipDoclet: ${doSkipDoclet}" />
    </target>

    <target id="checkPlatforms" name="checkPlatforms">
        <condition property="isMacOsX">
            <and>
                <os family="mac"/>
                <os family="unix"/>
            </and>
        </condition>
    </target>

    <target id="check" name="check" depends="checkPlatforms">
        <condition property="docletsAreCompiled">
            <and>
                <available classname="ListFilesFilesDoclet" classpath="${doc}/src"/>
            </and>
        </condition>
        <condition property="hasAnt17">
            <contains string="${ant.version}" substring="1.7"/>
        </condition>
        <condition property="hasAnt16">
            <contains string="${ant.version}" substring="1.6"/>
        </condition>
        <condition property="isJava13">
            <contains string="${java.version}" substring="1.3"/>
        </condition>
        <condition property="isJava14">
            <contains string="${java.version}" substring="1.4"/>
        </condition>
        <condition property="isJava15">
            <contains string="${java.version}" substring="1.5"/>
        </condition>
        <condition property="isJava14+">
            <or>
                <contains string="${java.version}" substring="1.4"/>
                <contains string="${java.version}" substring="1.5"/>
            </or>
        </condition>
        <condition property="isJava15">
            <contains string="${java.version}" substring="1.5"/>
        </condition>
        <uptodate property="dotjavafiles.uptodate"
            targetfile="${src}/core.javafiles">
            <srcfiles dir="${src}" includes="**/*.java" />
        </uptodate>

    </target>

    <!-- clean -->
    <target id="clean" name="clean" description="Removes autogenerated files.">
    <!--
            <delete>
                <fileset dir="${src}" includes="*.classes" />
            </delete>
-->
            <delete dir="${build}" />

            <delete>
                <fileset dir="${dist}" includes="*.jar" />
            </delete>
            <delete dir="${test.reports}" />

    </target>
	<target name="all" depends="dist,smarts,tests" description="Compiles and builds ambit2 jars (to be found in dist directory)">
	</target>

	<target name="init" >
        <tstamp />
        <mkdir dir="${build}" />
        <mkdir dir="${dist}" />
        <mkdir dir="${sourcedist}" />
	</target>

	<target name="compile" depends="init" description="Compiles all Java files">
		<javac srcdir="src" destdir="${build}" deprecation="yes">
		<include name="**/*.java" />
			<classpath refid="project.class.path"/>
		</javac>
  </target>

	<target name="compile-smarts" depends="init" description="Compile smarts package">
	    <javac srcdir="${src}/ambit2/smarts" destdir="${build}"
    	optimize="${optimization}"  debug="${debug}" deprecation="${deprecation}">
		<classpath refid="project.class.path" />
    </javac>
	</target>

	<target name="compile-tests" depends="compile" description="Compile tests package">
	    <javac srcdir="${src}/ambit2/test" destdir="${build}"
    	optimize="${optimization}"  debug="${debug}" deprecation="${deprecation}">
		<classpath refid="project.class.path" />
    </javac>
	</target>

	<target id="dist" name="dist" depends="compile" description="Compiles ambit-core.jar (config,log,io,smiles,external)">
	<jar jarfile="${dist}/ambit-core-${version}.jar" compress="true">
	<!--  manifest="${src}MANIFESTAPP.MFT" > -->
		<fileset dir="${build}">
			<includesfile name="${src}/ambit2.core.classes" />
		</fileset>
	</jar>

	</target>

    <!-- ambit-smarts-version.jar -->
	<target	id="smarts" name="smarts" depends="compile-smarts" description="Compiles ambit-smarts-vX.X.jar package">
		<jar jarfile="${dist}/ambit-smarts-${version}.jar" compress="true">
			<fileset dir="${build}">
				<includesfile name="${src}/ambit2.smarts.classes" />
			</fileset>
		</jar>
	</target>

    <!-- ambit-test-version.jar -->

	<target	id="tests" name="tests" depends="compile-tests" description="Compiles ambit-tests-vX.X.jar package">
		<jar jarfile="${dist}/ambit-tests-${version}.jar" compress="true">
			<fileset dir="${build}/ambit2/test" includes="**/*.class" />
		</jar>
	</target>

	  <target name="run-smarts" depends="compile-smarts" description="Run smarts">
	    <java classname="ambit2.smarts">
	      <classpath>
	        <pathelement location="${build}"/>
	      </classpath>
	    </java>
	  </target>

	<target name="test" depends="compile-tests,test-smarts" description="Run junit tests"/>

	<!-- Run junit tests for smarts package -->
	<target name="test-smarts" depends="compile-smarts" description="Run junit tests for smarts package, console output">
	  <junit fork="yes" haltonfailure="yes">
	    <test name="ambit2.test.smarts.TestSmartsSearch" />
	    <formatter type="plain" usefile="false" />
		<classpath refid="test.class.path" />
	  </junit>
	  <junit fork="yes" haltonfailure="yes">
		    <test name="ambit2.test.smarts.TestRecursiveSmartsSearch" />
		    <formatter type="plain" usefile="false" />
			<classpath refid="test.class.path" />
	  </junit>
	</target>

	<!-- Run tests and generate HTML report for all packages -->
	<target name="test-html" depends="compile,compile-tests" description="Run tests and generate HTML report (to be found in reports directory)">
 	  <mkdir dir="${test.reports}" />
	  <junit fork="yes" printsummary="yes" haltonfailure="no">
	  	<!--
	    <batchtest fork="yes" todir="${test.reports}" >
	      <fileset dir="${build}/ambit2/test">
	        <include name="Test*.class" />
	      </fileset>
	    </batchtest>
	    -->
	    <batchtest fork="yes" todir="${test.reports}">
	      <fileset dir="${src}">
	         <include name="**/*Test.java" />
	         <include name="**/Test*.java" />
	      </fileset>
	    </batchtest>

	    <formatter type="xml" />
	    <classpath refid="test.class.path" />
	  </junit>

	  <junitreport todir="${test.reports}">
	    <fileset dir="${test.reports}">
	      <include name="TEST-*.xml" />
	    </fileset>
	    <report todir="${test.reports}" />
	  </junitreport>
	</target>

	<!-- Generate source distribution  -->
	<target name="srcdist1" description="Backs up all source into a ambit2-source-vX.X-date.zip file (dist directory).">
		<mkdir dir="${sourcedist}" />
		<tstamp/>
		<property name="backupFile" value ="${ant.project.name}-${version}-${DSTAMP}.tar.gz" />

		<tar tarfile="${sourcedist}/${backupFile}" 	basedir="${src}" compression="gzip" />
		<echo message="Backup file ${backupFile} has been created." />
	</target>

	<target name="srcdist" description="Source distribution.">
		<mkdir dir="${sourcedist}" />
		<mkdir dir="${dist}" />
		<tstamp/>
		<property name="package" value ="${ant.project.name}-source-${version}_${DSTAMP}.zip" />

               <copy todir="${sourcedist}/${src}">
               	<!--
                        <fileset dir="${src}" includes="demo.datafiles" />
                        <fileset dir="${src}" includes="database.datafiles" />
                        <fileset dir="${src}" includes="ambit.xml" />
                        <fileset dir="${src}" includes="todo.txt" />
 				-->
                        <fileset dir="${src}" includes="**/*" />
                </copy>
		<!--
               <copy todir="${sourcedist.dir}/data/misc">
		                <fileset dir="data/misc" includes="chemicals.txt" />
                        <fileset dir="data/misc" includes="Debnath_smiles.csv" />
                        <fileset dir="data/misc" includes="Glende_smiles.csv" />
                        <fileset dir="data/misc" includes="test_properties.sdf" />
                        <fileset dir="data/misc" includes="BCF_Grammatica.csv" />
                </copy>
		        <copy todir="${sourcedist.dir}/data/templates">
			                <fileset dir="data/templates" includes="DSSTox_LC50_template.xml" />
			                <fileset dir="data/templates" includes="DSSTox_ERBinding_template.xml" />
			                <fileset dir="data/templates" includes="DSSTox_Carcinogenicity_template.xml" />
			                <fileset dir="data/templates" includes="DSSTox_TA98_template.xml" />
			                <fileset dir="data/templates" includes="bioaccumulation_template.xml" />
			                <fileset dir="data/templates" includes="bioconcentration_template.xml" />
			                <fileset dir="data/templates" includes="ringTemplateStructures.sdf" />
            					<fileset dir="data/templates" includes="qmrf.xml" />
            					<fileset dir="data/templates" includes="qmrf.dtd" />
            					<fileset dir="data/templates" includes="catalogs.xml" />
					<fileset dir="data/templates" includes="qmrf.dtd" />
					<fileset dir="data/templates" includes="qmrf.xsl" />
					<fileset dir="data/templates" includes="qmrf_insert_help.xsl" />

		         </copy>
                 <copy todir="${sourcedist.dir}/sql">
                        <fileset dir="sql" includes="*.bat" />
                        <fileset dir="sql" includes="ambit_create.sql" />
                        <fileset dir="sql" includes="ambit_drop.sql" />
                        <fileset dir="sql" includes="ambit.xml" />
                </copy>
-->
         	<copy todir="${sourcedist}">
         		<fileset dir="" includes="build.xml" />
<!--
                 <fileset dir="." includes="ambitdb.conf" />
-->
            </copy>
            <mkdir dir="${sourcedist}/lib" />
            <zip zipfile="${dist}/${package}" basedir="${sourcedist}"  />

		<echo message="Source distribution ${dist}/${package} has been created." />
		<delete dir="${sourcedist}"/>
	</target>



</project>