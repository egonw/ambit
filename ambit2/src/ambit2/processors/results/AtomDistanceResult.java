/* AtomDistanceResult.java
 * Author: Nina Jeliazkova
 * Date: 2006-4-9 
 * Revision: 0.1 
 * 
 * Copyright (C) 2005-2006  
 * 
 * Contact: nina@acad.bg
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 * All we ask is that proper credit is given for our work, which includes
 * - but is not limited to - adding the above copyright notice to the beginning
 * of your source code files, and to any copyright notice that you may distribute
 * with programs based on this work.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 */

package ambit2.processors.results;

import java.io.Writer;
import java.text.NumberFormat;
import java.util.Locale;

import ambit2.database.query.DistanceQuery;
import ambit2.exceptions.AmbitException;
import ambit2.processors.IAmbitResult;

/**
 * A class encapsulating the distance between two atoms. Generated by {@link ambit2.processors.structure.AtomDistanceProcessor} 
 * and used by {@link ambit2.database.writers.AtomDistanceWriter} to write distances to the database.
 * @author Nina Jeliazkova nina@acad.bg
 * <b>Modified</b> 2006-4-9
 */
public class AtomDistanceResult implements IAmbitResult, Comparable {
	protected String title="";
    protected String[] atoms = {"",""};
    protected double distance = 0;
    protected static NumberFormat numberFormat = null;
    protected static double eps = 0.5;
    
    /**
     * 
     */
    public AtomDistanceResult() {
        this("C","C",0);
    }
    public AtomDistanceResult(String atom1, String atom2, double distance) {
        super();
        setAtoms(atom1,atom2);
        this.distance = distance;
        if (numberFormat == null) {
            numberFormat = NumberFormat.getInstance(Locale.US);
            numberFormat.setMaximumFractionDigits(1);
        }
    }
    public void setAtoms(String atom1, String atom2) {
        if (atom1.compareTo(atom2) < 0) {
            atoms[0] = atom1;
            atoms[1] = atom2;
        } else {
            atoms[1] = atom1;
            atoms[0] = atom2;            
        }
    }
    /* (non-Javadoc)
     * @see ambit2.processors.IAmbitResult#update(java.lang.Object)
     */
    public void update(Object object) throws AmbitException {
        // TODO Auto-generated method stub

    }

    /* (non-Javadoc)
     * @see ambit2.processors.IAmbitResult#clear()
     */
    public void clear() {
        this.distance = 0;
        setAtoms("","");
    }

    /* (non-Javadoc)
     * @see ambit2.processors.IAmbitResult#write(java.io.Writer)
     */
    public void write(Writer writer) throws AmbitException  {
        try {
            writer.write(toString());
        } catch (Exception x) {
            throw new AmbitException(x);
        }

    }
    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    public String toString() {
        StringBuffer b = new StringBuffer();
        b.append(atoms[0]);
        b.append('\t');
        b.append(atoms[1]);
        b.append('\t');
        b.append(numberFormat.format(distance));
        return b.toString();
    }
    public synchronized double getDistanceDouble() {
        return distance;
    }
    public synchronized void setDistanceDouble(double distance) {
        this.distance = distance;
    }
    public synchronized int getDistance() {
        return (int) Math.floor(distance);
    }

    public String getAtom1() {
        return atoms[0];
    }
    public String getAtom2() {
        return atoms[1];
    }
    /* (non-Javadoc)
     * @see java.lang.Object#clone()
     */
    protected Object clone() throws CloneNotSupportedException {
        AtomDistanceResult r = new AtomDistanceResult(atoms[0],atoms[1],distance);
        return r;
    }
    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    public boolean equals(Object obj) {
        AtomDistanceResult r = (AtomDistanceResult) obj;
        return 	atoms[0].equals(r.atoms[0]) &&
        		atoms[1].equals(r.atoms[1]) &&
        		(Math.abs(distance - r.distance) < eps);
    }
    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    public int compareTo(Object o) {
        AtomDistanceResult r = (AtomDistanceResult) o;
        int i = atoms[0].compareTo(r.atoms[0]);
        if (i == 0){
            i = atoms[1].compareTo(r.atoms[1]);
            if (i == 0) {
               double d = distance - r.distance;
               if (Math.abs(d) < eps) return 0;
               if (d>0) return 1; else return -1;
            } else return i;
        } else return i;
		
		
    }
    public boolean query(DistanceQuery query) {
        if (query == null) return true;
        return	atoms[0].equals(query.getAtom1()) &&
        		atoms[1].equals(query.getAtom2() ) &&
        		query.isTrue(distance);
    }    
	public String getTitle() {
		return title;
	}
	public void setTitle(String title) {
		this.title = title;
		
	}


}
