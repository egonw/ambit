/* AtomDistanceWriter.java
 * Author: Nina Jeliazkova
 * Date: 2006-4-9 
 * Revision: 0.1 
 * 
 * Copyright (C) 2005-2006  Ideaconsult Ltd.
 * 
 * Contact: nina@acad.bg
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 * All we ask is that proper credit is given for our work, which includes
 * - but is not limited to - adding the above copyright notice to the beginning
 * of your source code files, and to any copyright notice that you may distribute
 * with programs based on this work.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 */

package ambit2.database.writers;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Iterator;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IChemObject;

import ambit2.exceptions.AmbitException;
import ambit2.processors.results.AtomDistanceResult;
import ambit2.processors.results.AtomDistancesResult;
import ambit2.data.AmbitUser;

/**
 * Writes pairwise atom distances to database. These are used to speed up pairwise distance queries.
 * Expects each molecule to have a property {@link ambit2.processors.results.AtomDistancesResult#property} containing 
 * distances within {@link ambit2.processors.results.AtomDistancesResult}. These could be generated by {@link ambit2.processors.structure.AtomDistanceProcessor}
 * @author Nina Jeliazkova nina@acad.bg
 * <b>Modified</b> 2006-4-9
 */
public class AtomDistanceWriter extends DefaultDbWriter {
    public static String PS_SELECT_DISTANCE = "select iddistance from atom_distance where atom1=? and atom2=? and distance=?";
    public static String PS_INSERT_DISTANCE = "insert ignore into atom_distance (atom1, atom2, distance) values (?,?,?);";
    public static String PS_INSERT_STRUCTURE = "insert into atom_structure (idstructure, iddistance) values (?,?);";

    public static String PS_INSERT_STRUCTUREDISTANCE = "insert into atom_structure (idstructure,iddistance) values (?,(select iddistance from atom_distance where atom1=? and atom2=? and distance=?))";
    public static String PS_DELETE = "delete from atom_STRUCTURE where idstructure=?;";
    public PreparedStatement psInsertDistance;
    public PreparedStatement psInsertStructure;
    public PreparedStatement psInsertStructureDistance;
    public PreparedStatement psDelete;
    public PreparedStatement psSelect;
    /**
     * 
     */
    public AtomDistanceWriter(Connection connection,AmbitUser user) {
        super(connection,user);
        try {
            setKeyCheck(connection,false);
        } catch (Exception x) {
            logger.error(x);
        }
        psInsertDistance = null;
        psInsertStructure = null;
        psInsertStructureDistance = null;
        psDelete = null;
        psSelect = null;

    }
    protected void prepareStatement() throws SQLException {
        if (psInsertStructure == null)
            psInsertStructure = connection.prepareStatement(PS_INSERT_STRUCTURE);
        if (psInsertDistance == null)
            psInsertDistance = connection.prepareStatement(PS_INSERT_DISTANCE);
        if (psInsertStructureDistance == null)
            psInsertStructureDistance = connection.prepareStatement(PS_INSERT_STRUCTUREDISTANCE);             
        if (psDelete == null) psDelete = connection.prepareStatement(PS_DELETE);
        if (psSelect == null) psSelect = connection.prepareStatement(PS_SELECT_DISTANCE);
    }
    protected int selectDistance(AtomDistanceResult distance)  throws AmbitException {
        ResultSet rs = null;
        try {
            psSelect.clearParameters();
		    psSelect.setString(1,distance.getAtom1());
		    psSelect.setString(2,distance.getAtom2());
		    psSelect.setDouble(3,distance.getDistance());
		    rs = psSelect.executeQuery();
		    int iddistance = -1;
		    if (rs.next()) {
		        iddistance = rs.getInt(1);
		    }
		    rs.close();
		    return iddistance;
        } catch (SQLException x) {
            throw new AmbitException(x);
        }
    }
    protected void insertStructureDistance(int idstructure, AtomDistanceResult distance) throws AmbitException {
		try {
		    psInsertStructureDistance.clearParameters();
		    psInsertStructureDistance.setInt(1,idstructure);
		    psInsertStructureDistance.setString(2,distance.getAtom1());
		    psInsertStructureDistance.setString(3,distance.getAtom2());
		    psInsertStructureDistance.setDouble(4,distance.getDistance());
		    psInsertStructureDistance.executeUpdate();
		} catch (SQLException x) {
		    logger.warn(x);
		    //System.out.println("trying to insert " + Integer.toString(idstructure) + " "+distance);
			//TODO logger.error(x);
		        int iddistance = selectDistance(distance);
		        if (iddistance == -1 ) iddistance = insertDistance(distance);
		        if (iddistance >0 )
		            insertStructure(idstructure,iddistance);
		}
    }    
    /**
     * inserts a row into atom_structure table
     * @param idstructure
     * @param idistance
     * @return rows inserted
     * @throws AmbitException
     */
    protected int insertStructure(int idstructure, int idistance) throws AmbitException {
		try {
		    psInsertStructure.clearParameters();
		    psInsertStructure.setInt(1,idstructure);
		    psInsertStructure.setInt(2,idistance);
		    int rows = psInsertStructure.executeUpdate();
		    if (rows > 0) logger.debug("insertStructure successful");
			return rows;
		} catch (SQLException x) {
			throw new AmbitException(x);
		}
    }    
    protected int insertDistance(AtomDistanceResult distance) throws AmbitException {
		try {
		    psInsertDistance.clearParameters();
			psInsertDistance.setString(1,distance.getAtom1());
			psInsertDistance.setString(2,distance.getAtom2());
			psInsertDistance.setDouble(3,distance.getDistance());
			psInsertDistance.executeUpdate();
			int id = -1;
			ResultSet tmpRS = psInsertDistance.getGeneratedKeys();
			if (tmpRS.next()) {
			    id = tmpRS.getInt(1);
			    logger.debug("insertDistance successful");
			}
			tmpRS.close();
			
			return id;
		} catch (SQLException x) {
			throw new AmbitException(x);
		}
    }
    /* (non-Javadoc)
     * @see org.openscience.cdk.io.ChemObjectWriter#write(org.openscience.cdk.interfaces.ChemObject)
     */
    public void write(IChemObject object) throws CDKException {
        Object o = object.getProperty(AtomDistancesResult.property);
        if (o == null) return;
        if (!(o instanceof AtomDistancesResult)) return;
        
        int idstructure = -1;

        try {
            idstructure = getIdStructure(object);
            prepareStatement();
        } catch (Exception x) {
            x.printStackTrace();
            throw new CDKException(x.getMessage());
        }
        
        try {
            boolean ac = connection.getAutoCommit();
            connection.setAutoCommit(false);
	        psDelete.clearParameters();
	        psDelete.setInt(1,idstructure);
	        psDelete.execute();
	        connection.commit();
	        
	        Iterator i = ((AtomDistancesResult) o).getIterator();
	        AtomDistanceResult a = null;
	        while (i.hasNext()) {
	            try {
		        
		            a = (AtomDistanceResult)i.next();
	                insertStructureDistance(idstructure,a);
		        } catch (AmbitException x) {
		            logger.error(x);
		            //System.out.println("trying to insert "+a.toString());
		        }
	        }
	        connection.commit();
	        
	        connection.setAutoCommit(ac);
        } catch (SQLException x) {
            try {
            	connection.rollback();
            } catch (SQLException e) {
                //TODO log
                e.printStackTrace();
            }
            throw new CDKException(x.getMessage());
        }
    }


    /* (non-Javadoc)
     * @see org.openscience.cdk.io.ChemObjectIO#close()
     */
    public void close() throws IOException {
        try {
            setKeyCheck(connection,true);
	        if (psInsertDistance != null) psInsertDistance.close();
	        psInsertDistance = null;
	        if (psInsertStructure != null) psInsertStructure.close();
	        psInsertStructure = null;
	        if (psInsertStructureDistance != null) psInsertStructureDistance.close();
	        psInsertStructureDistance = null;	        
	        if (psDelete != null) psDelete.close();
	        psDelete = null;
        } catch (SQLException x) {
            throw new IOException(x.getMessage());
        }

    }
    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    public String toString() {
        return "Stores distances between pair of atoms into database";
        
    }

}
