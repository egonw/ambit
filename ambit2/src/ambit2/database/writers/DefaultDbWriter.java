package ambit2.database.writers;

import java.io.IOException;
import java.io.OutputStream;
import java.io.Writer;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;
import org.openscience.cdk.interfaces.IChemObject;
import org.openscience.cdk.io.formats.IResourceFormat;

import ambit2.config.AmbitCONSTANTS;
import ambit2.database.AmbitDatabaseFormat;
import ambit2.log.AmbitLogger;
import ambit2.data.AmbitUser;
import ambit2.database.core.DbSQL;
import ambit2.database.exception.DbAmbitException;

/**
 * Abstract class for writing objects to database. Adds some database specific functionalities to the parent class.
 * @author Nina Jeliazkova nina@acad.bg
 * <b>Modified</b> Aug 30, 2006
 */
public abstract class DefaultDbWriter extends AmbitDatabaseWriter {
	protected AmbitUser user;
	protected Connection connection;
	protected PreparedStatement ps = null;
	protected static AmbitLogger logger = new AmbitLogger(DefaultDbWriter.class);
	protected long records_written = 0;
	/**
	 * Creates the writer with null connection and null user
	 *
	 */
	public DefaultDbWriter() {
		this (null,null);
		
	}
	/**
	 * 
	 * @param connection {@link Connection} database connection 
	 * @param user {@link AmbitUser} user
	 */
	public DefaultDbWriter(Connection connection,AmbitUser user) {
		super();
		this.connection = connection;
		this.user = user;
	}
	protected abstract void prepareStatement() throws SQLException  ;
	/**
	 * 
	 * @param object
	 * @return structure identifier - object.getProperty({@link AmbitCONSTANTS#AMBIT_IDSTRUCTURE})
	 * @throws DbAmbitException
	 */
	public int getIdStructure(IChemObject object) throws DbAmbitException {
	    Object id = object.getProperty(AmbitCONSTANTS.AMBIT_IDSTRUCTURE);
	    if (id == null) throw new DbAmbitException(null,AmbitCONSTANTS.AMBIT_IDSTRUCTURE+" not defined!");
	    try {
	        return ((Integer) id).intValue();
	        //return Integer.parseInt(id.toString());
	    } catch (Exception x) {
	        throw new DbAmbitException(null,AmbitCONSTANTS.AMBIT_IDSTRUCTURE+" not valid!",x);
	    }
	}
	/**
	 * 
	 * @param object
	 * @return substance identifier object.getProperty({@link AmbitCONSTANTS#AMBIT_IDSUBSTANCE}); 
	 * @throws DbAmbitException
	 */
	public int getIdSubstance(IChemObject object) throws DbAmbitException {
	    Object id = object.getProperty(AmbitCONSTANTS.AMBIT_IDSUBSTANCE);
	    if (id == null) throw new DbAmbitException(null,AmbitCONSTANTS.AMBIT_IDSUBSTANCE+" not defined!");
	    try {
	        //return Integer.parseInt(id.toString());
	        return ((Integer) id).intValue();
	    } catch (Exception x) {
	        throw new DbAmbitException(null,AmbitCONSTANTS.AMBIT_IDSUBSTANCE+" not valid!",x);
	    }
	}	
	/**
	 * commits if connection is not doing auto ommit <br>
	 * closes prepared statement
	 */
	public void close() throws IOException {
		try {
		    if (!connection.getAutoCommit())
		        connection.commit();
		    connection.setAutoCommit(false);
		    if (ps != null) ps.close(); ps = null;
		} catch (SQLException x) {
			ps = null;
			logger.error(x);
			throw new IOException(x.getMessage());
		}

	}
	public Connection getConnection() {
		return connection;
	}
	/**
	 * Sets connection
	 * @param connection
	 */
	public void setConnection(Connection connection) {
		if (this.connection!=null) 
			try {
				close();
			} catch (IOException x) {
			}
		this.connection = connection;
	}
	public AmbitUser getUser() {
		return user;
	}
	public void setUser(AmbitUser user) {
		this.user = user;
	}
	public String toString() {
		return "Write diverse information into database";
	}
	public void setKeyCheck(Connection conn, boolean turnOn) throws SQLException {
		String fkey, ukey;

		if (turnOn)  {
			fkey = DbSQL.AMBIT_startForeignKeyCheck;
			ukey = DbSQL.AMBIT_startUniqueKeyCheck;
		} else {
			fkey = DbSQL.AMBIT_stopForeignKeyCheck;
			ukey = DbSQL.AMBIT_stopUniqueKeyCheck;			
		}
			
		Statement st = conn.createStatement();
		st.execute(fkey);
		st.execute(ukey);
		st.close();
		st = null;
	}
	protected int getAutoGeneratedKey(PreparedStatement stmt) throws SQLException {
		int id = -1;
		ResultSet tmpRS = stmt.getGeneratedKeys();
		if (tmpRS.next()) id = tmpRS.getInt(1);
		tmpRS.close();
		return id;
	}	
	/* (non-Javadoc)
     * @see org.openscience.cdk.io.IChemObjectIO#accepts(java.lang.Class)
     */
    public boolean accepts(Class classObject) {
		Class[] interfaces = classObject.getInterfaces();
		for (int i=0; i<interfaces.length; i++) {
			if (IAtomContainer.class.equals(interfaces[i])) return true;
		}
		return false;
    }
    /* (non-Javadoc)
     * @see org.openscience.cdk.io.IChemObjectWriter#setWriter(java.io.OutputStream)
     */
    public void setWriter(OutputStream writer) throws CDKException {
        throw new CDKException(this.getClass().getName() + " writer setting not allowed");

    }
    /* (non-Javadoc)
     * @see org.openscience.cdk.io.IChemObjectWriter#setWriter(java.io.Writer)
     */
    public void setWriter(Writer writer) throws CDKException {
        throw new CDKException(this.getClass().getName() + " writer setting not allowed");

    }
    /* (non-Javadoc)
     * @see org.openscience.cdk.io.IChemObjectIO#getFormat()
     */
    public IResourceFormat getFormat() {
        // TODO Auto-generated method stub
        return new AmbitDatabaseFormat();
    }
}
