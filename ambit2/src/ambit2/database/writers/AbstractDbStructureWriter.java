package ambit2.database.writers;

import java.io.OutputStream;
import java.io.Writer;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IChemObject;
import org.openscience.cdk.interfaces.IMolecule;
import org.openscience.cdk.io.formats.IResourceFormat;

import ambit2.exceptions.AmbitException;
import ambit2.data.AmbitUser;

public abstract class AbstractDbStructureWriter extends DefaultDbWriter {
	public AbstractDbStructureWriter() {
		super();
	}
	public AbstractDbStructureWriter(Connection connection,AmbitUser user) {
		super(connection,user);
	}
	public void write(IChemObject object) throws CDKException {
        try {
        	int idstructure = getIdStructure(object);
        	write(idstructure,object);
        } catch (AmbitException x) {
        	throw new CDKException(x.getMessage());
        }
	}
	public abstract int write(int idstructure,IChemObject object) throws AmbitException ;

	public IResourceFormat getFormat() {
		// TODO define database format
		return null;
	}
	public int getAutoGeneratedKey(PreparedStatement stmt) throws SQLException {
		int id = -1;
		ResultSet tmpRS = stmt.getGeneratedKeys();
		if (tmpRS.next()) id = tmpRS.getInt(1);
		tmpRS.close();
		return id;
	}
	public String toString() {
		return "Writes compounds into database";
	}
	/* (non-Javadoc)
     * @see org.openscience.cdk.io.IChemObjectWriter#setWriter(java.io.Writer)
     */
    public void setWriter(Writer writer) throws CDKException {
        throw new CDKException("This is not database writer");

    }
    /* (non-Javadoc)
     * @see org.openscience.cdk.io.IChemObjectWriter#setWriter(java.io.OutputStream)
     */
    public void setWriter(OutputStream writer) throws CDKException {
        throw new CDKException("This is not database writer");

    }
    /* (non-Javadoc)
     * @see org.openscience.cdk.io.IChemObjectIO#accepts(java.lang.Class)
     */
    public boolean accepts(Class classObject) {
		Class[] interfaces = classObject.getInterfaces();
		for (int i=0; i<interfaces.length; i++) {
			if (IMolecule.class.equals(interfaces[i])) return true;
		}
		return false;
    }
}
