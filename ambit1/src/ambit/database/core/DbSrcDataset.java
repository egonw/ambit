/**
 * Created on 2005-1-31
 *
 */
package ambit.database.core;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import ambit.data.AmbitList;
import ambit.data.literature.LiteratureEntry;
import ambit.data.molecule.SourceDataset;
import ambit.data.molecule.SourceDatasetList;
import ambit.database.DbConnection;
import ambit.database.DbCore;
import ambit.database.exception.DbAmbitException;
import ambit.database.exception.DbSourceDatasetException;

/**
 * Database API <br>
 * Reads, writes and looks for an origin data set. Used by {@link ambit.database.writers.SourceDatasetWriter} 
 * @author Nina Jeliazkova <br>
 * <b>Modified</b> 2005-4-7
 */
public class DbSrcDataset extends DbCore {
	//table SRC_DATASET
	private static final String AMBIT_getSrcDatasetByName = "SELECT id_srcdataset,name,idref from src_dataset where name=? order by id_srcdataset;"; 
	private static final String AMBIT_insertSrcDatasetName = "INSERT ignore into src_dataset (id_srcdataset,name,idref) values (null,?,?);";
	private static final String AMBIT_searchSrcdatasets = "SELECT id_srcdataset,name,idref from src_dataset order by name ";
	private static final String AMBIT_deleteSrcdatasets = "delete from src_dataset where id_srcdataset=?";

	
	protected PreparedStatement psSrc = null;	
	
	private DbReference dbr = null;
	
	/**
	 * 
	 */
	public DbSrcDataset(DbConnection conn) {
		super(conn);
	}
	protected void getSourceDataset(ResultSet rs, SourceDataset dataset) throws DbSourceDatasetException {
		try {
			dataset.setId(rs.getInt(1));
			dataset.setName(rs.getString(2));
			dataset.getReference().setId(rs.getInt(3));
			dataset.setEditable(false);
		} catch (SQLException x) {
			throw new DbSourceDatasetException(dataset,"getSourceDataset",x);
		}
	}
	public int getSourceDatasetId(SourceDataset dataset) throws DbSourceDatasetException {
		try {
			PreparedStatement pss = getConn().prepareStatement(AMBIT_getSrcDatasetByName);
			pss.setString(1,dataset.getName());
			ResultSet rs = pss.executeQuery();
			if (rs.next()) getSourceDataset(rs,dataset); 
			else dataset.setId(-1); 	
			pss.close();
			return dataset.getId();
		} catch (SQLException x) {
			throw new DbSourceDatasetException(dataset,"getSourceDatasetID",x);
		}
	}

	public SourceDatasetList searchDatasets(SourceDataset dataset,SourceDatasetList list) throws DbAmbitException {
		String sql = AMBIT_searchSrcdatasets;
		if ((dataset == null) || dataset.getName().equals("")) sql += AMBIT_smtdelimiter;
		else sql += " where name regexp '" + dataset.getName() + "';"; 
		try {
		ResultSet rs = stmt.executeQuery(sql);
		while (rs.next()) { 
			SourceDataset d = new SourceDataset();
			
			getSourceDataset(rs,d);
			if (list == null) list = new SourceDatasetList();
			list.addItem(d);
		}
		rs.close();
		if (dbr == null) { 
			dbr = new DbReference(dbconn);
			dbr.initialize();
		}	
		if (list != null)
			for (int i = 0; i < list.size(); i++) {
				LiteratureEntry ref = ( (SourceDataset) list.getItem(i)).getReference();
				dbr.getReference(ref.getId(),ref);
			}

		return list;
		} catch (SQLException x) {
			throw new DbSourceDatasetException(dataset,"searchDatasets",x);
		}
	}
	public int getSourceDataset(SourceDataset dataset) throws DbAmbitException {
		try {
			PreparedStatement pss = getConn().prepareStatement(AMBIT_getSrcDatasetByName);
			pss.setString(1,dataset.getName());
			ResultSet rs = pss.executeQuery();
			if (rs.next()) {
				getSourceDataset(rs,dataset);
				if (dbr == null) { 
					dbr = new DbReference(dbconn);
					dbr.initialize();
				}	
				LiteratureEntry ref = dataset.getReference();
				dbr.getReference(ref.getId(),ref);
			}
			rs.close();
			pss.close();
			return dataset.getId();
		} catch (SQLException x) {
			throw new DbSourceDatasetException(dataset,"searchDatasets",x);
		}
	}	
	public int addSourceDataSet(SourceDataset dataset) throws DbAmbitException {
		int id = getSourceDataset(dataset);
		if (id > -1) return id;
		LiteratureEntry ref = dataset.getReference(); 
		int idref = ref.getId();
		if (idref == -1) {
			if (dbr == null) { 
				dbr = new DbReference(dbconn);
				dbr.initialize();
			}	
			idref = dbr.addReference(ref);		
		} 
		try {
			PreparedStatement pss = getConn().prepareStatement(AMBIT_insertSrcDatasetName);
			pss.setString(1,dataset.getName());
			pss.setInt(2,idref);		
			pss.executeUpdate();
			id = getAutoGeneratedKey(pss);
			dataset.setId(id);
			pss.close();
			return id;
		} catch (SQLException x) {
			throw new DbSourceDatasetException(dataset,"addSourceDataSet",x);
		}
	}
	public boolean deleteSourceDataset(SourceDataset dataset) throws DbAmbitException {
		try {
			PreparedStatement pss = getConn().prepareStatement(AMBIT_deleteSrcdatasets);
			pss.setInt(1,dataset.getId());
			int count = pss.executeUpdate();
			pss.close();
			return count==1;
		} catch (SQLException x) {
			throw new DbSourceDatasetException(dataset,"Delete dataset "+ dataset,x);
		}
	}	
	/*
	private int getSourceDataSet(Statement stmtUpdatable, String name, boolean add) throws SQLException {
		int id = 0;

		if (!stmtUpdatable.execute(DbSQL.AMBIT_getSrcDatasetByName)
			   ("select id_srcdataset,name from src_dataset where name regexp '^" + 
				name +"' order by id_srcdataset;")) return 0;
		
		ResultSet rs = stmtUpdatable.getResultSet();
		if (! rs.next()) {
			rs.moveToInsertRow();
		    rs.updateString("name", name);
		    rs.insertRow();
		    rs.last();
			id = rs.getInt(1);
			isNew = Boolean.TRUE;
		} else {	
			id = rs.getInt(1);
			isNew = Boolean.FALSE;			
		}
		rs.close();
		rs = null;
		return id;
	}
	public int getSourceDataSetID(String filename, boolean addIfNew) throws SQLException {
		int idsourcedataset = 0;		
		try {
			int i = filename.lastIndexOf("\\");
			if (i > 0)
				idsourcedataset = getSourceDataSet(filename.substring(i+1),addIfNew);
			else
				idsourcedataset = getSourceDataSet(filename,addIfNew);
			stmt1.close();			
		} catch (SQLException e) {
			e.printStackTrace();
			stmt1.close();
		}
		stmt1 = null;
		return idsourcedataset;
	}
*/

		
	
}
