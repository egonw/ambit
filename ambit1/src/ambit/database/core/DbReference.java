/**
 * Created on 2005-3-18
 *

 */
package ambit.database.core;

import java.sql.ResultSet;
import java.sql.SQLException;

import ambit.data.AmbitList;
import ambit.data.literature.AuthorEntries;
import ambit.data.literature.AuthorEntry;
import ambit.data.literature.JournalEntry;
import ambit.data.literature.LiteratureEntries;
import ambit.data.literature.LiteratureEntry;
import ambit.database.DbConnection;
import ambit.database.DbCore;
import ambit.database.exception.DbAmbitException;
import ambit.database.exception.DbReferenceException;

/**
 * Database API<br>
 * Reads, writes and looks for {@link ambit.data.literature.LiteratureEntry}s in the database  
 * @author Nina Jeliazkova <br>
 * <b>Modified</b> 2005-4-7
 */

public class DbReference extends DbCore {
	protected static final String AMBIT_selectLiterature = "SELECT idref,literature.idjournal,reference,url,volume,pages,year_pub,abbreviation,name,publisher,city from literature,journal ";
	protected static final String AMBIT_selectjournal = "SELECT idjournal,abbreviation,name,publisher,city FROM journal";
	/**
	 * 
	 */
	
	public DbReference(DbConnection conn) {
		super(conn);
	}		
	public void initializeInsertEntry() throws DbAmbitException {
		initializePrepared("INSERT INTO literature (idref,literature.idjournal,reference,url,volume,pages,year_pub) VALUES (null,?,?,?,?,?,?);");

	}

	//TODO add authors, journals, etc
	public int addReference(String reference, String url) throws DbReferenceException {
		try {
			int idref = -1;
			String s = "INSERT INTO literature (idref,reference,url) VALUES (null,'" + 
					reference + "','" + url + "');";
			stmt.executeUpdate(s);
			ResultSet tmpRS = stmt.getGeneratedKeys();
		    if (tmpRS.next()) idref = tmpRS.getInt(1);
		    tmpRS.close();
		    return idref;
		} catch (SQLException x) {
			throw new DbReferenceException(null,"initializeInsertEntry",x);
		}
	}
	protected String getCondition(JournalEntry journal) {
		String cond = "";
		boolean first = true; 
		if (!journal.getName().equals("")) { 
			cond += "name regexp '^"+journal.getName()+"'" ; 
			first = false;
		}

		if (!journal.getAbbreviation().equals("")) {
			if (!first) cond+= " and ";			
			cond += "abbreviation regexp '^"+journal.getAbbreviation()+"'" ;
			first = false;
		}
		if (!journal.getPublisher().equals("")) {
			if (!first) cond+= " and ";
			cond += "publisher regexp '^"+journal.getPublisher()+"'" ; 
			first = false;
		}		
		if (!journal.getCity().equals("")) {
			if (!first) cond+= " and ";			
			cond += "city regexp '^"+journal.getCity()+"'" ; 
			first = false;
		}		
		if (!cond.equals("")) cond = " where " + cond;
		return cond;
	}
	public AmbitList searchJournal(JournalEntry journal) throws DbReferenceException {
		AmbitList list = null;
		try {
		String sql = AMBIT_selectjournal + 
			getCondition(journal) + 
			AMBIT_smtdelimiter;
		System.out.println(sql);
		ResultSet rs = stmt.executeQuery(sql);
		while (rs.next()) {
			if (list == null) list = new AmbitList();
			JournalEntry j = new JournalEntry();
			if (getJournal(rs,j) > -1) 
				list.addItem(j);
		}
		rs.close();
		return list;
		} catch (SQLException x) {
			throw new DbReferenceException(journal,"searchJournal",x);
		}
	}
	protected int getJournal(ResultSet rs,JournalEntry journal) throws DbReferenceException {
		try {
			journal.setId(rs.getInt(1));
			journal.setAbbreviation(rs.getString(2));
			journal.setName(rs.getString(3));
			journal.setPublisher(rs.getString(4));
			journal.setCity(rs.getString(5));
			return journal.getId();
		} catch (SQLException x) {
			throw new DbReferenceException(journal,"getJournal",x);
		}
	}
	public int getJournal(JournalEntry journal) throws DbReferenceException {
		int id = -1;
		try {
		String sql = AMBIT_selectjournal +
			" where abbreviation='"+journal.getAbbreviation() + "'" + AMBIT_smtdelimiter;
		
		ResultSet rs = stmt.executeQuery(sql);
				
		if (rs.next()) {
			id = getJournal(rs,journal);
		}
		rs.close();
		return id;
		} catch (SQLException x) {
			throw new DbReferenceException(journal,"getJournal",x);
		}
	}
	public int addJournal(JournalEntry journal) throws DbReferenceException {
		int idjournal = getJournal(journal);
		try {
			if (idjournal == -1) {
				stmt.executeUpdate(
						"INSERT into journal (idjournal,abbreviation,name,publisher,city) VALUES (null,'" +
						journal.getAbbreviation() + "','" +
						journal.getName() + "','" +
						journal.getPublisher() + "','" +
						journal.getCity() + "');");
				journal.setId(getAutoGeneratedKey(stmt));
				return journal.getId();
			} else return idjournal;
		} catch (SQLException x) {
			throw new DbReferenceException(journal,"addJournal\t"+x.getMessage(),x);
		}
	}
	
	
	public int addReference(LiteratureEntry entry) throws DbAmbitException {
		JournalEntry journal = entry.getJournal();
		int idJournal = getJournal(journal);
		if (idJournal == -1) idJournal = addJournal(journal);
		
		int idRef = getReference(entry);
		if (idRef == -1) {
			if (ps == null) initializeInsertEntry();
			try {
				ps.clearParameters();
				ps.setInt(1,journal.getId());
				ps.setString(2,entry.getName());
				ps.setString(3,entry.getWWW());
				ps.setString(4,entry.getVolume());
				ps.setString(5,entry.getPages());
				ps.setInt(6,entry.getYear());
				ps.executeUpdate();
			
				idRef = getAutoGeneratedKey(ps);
			} catch (SQLException x) {
				throw new DbReferenceException(entry,"addReference",x);
			}
		}
		entry.setId(idRef);
		
		addAuthors(idRef,entry.getAuthors());
		
		return idRef;

	}
	
	public void getAuthors(AuthorEntries authors) throws DbReferenceException {
		for (int i = 0; i < authors.size(); i++) 
			getAuthor((AuthorEntry)authors.getItem(i));
	}
	
	public void addAuthors(AuthorEntries authors) throws DbReferenceException {
		int idauthor;
		int count = 0;
		for (int i = 0; i < authors.size(); i++) {
			AuthorEntry author = (AuthorEntry) authors.getItem(i);
			idauthor = getAuthor(author);
			if (idauthor == -1) { idauthor = addAuthor(author); count++; }
		}	
	}
	public int addAuthors(int idref, AuthorEntries authors) throws DbReferenceException {
		if (idref == -1 ) return -1;
		addAuthors(authors);
		int count = 0;
		for (int i = 0; i < authors.size(); i++) {
		    try {
			count += stmt.executeUpdate(
					"INSERT IGNORE INTO ref_authors (idref,idauthor) VALUES("+
					idref + "," + authors.getItem(i).getId() + ");");
		    } catch (SQLException x) {
		    	throw new DbReferenceException(authors.getItem(i),x.getMessage(),x);
		    }
		}
//		getAuthors(authors);
		return count;
	}
	public AuthorEntries searchAuthor(AuthorEntry author) throws DbReferenceException {
		AuthorEntries list = null;
		try {
			ResultSet rs = stmt.executeQuery(
					"SELECT idauthor,name from author where name regexp '^"+author.getName()+"';");
			while (rs.next()) {
				if (list == null)  list = new AuthorEntries();
				AuthorEntry a = new AuthorEntry(rs.getString(2),rs.getInt(1));
				list.addItem(a);
			}
			rs.close();
			return list;
		} catch (SQLException x) {
			throw new DbReferenceException(author,"searchAuthor",x);
		}
	}
	
	public int getAuthor(AuthorEntry author) throws DbReferenceException {
		int idauthor = -1;
		try {
			ResultSet rs = stmt.executeQuery(
					"SELECT idauthor,name from author where name='"+author.getName()+"';");
			if (rs.next()) {
				idauthor = rs.getInt(1);
				author.setName(rs.getString(2));
			}
			rs.close();
			author.setId(idauthor);
			return idauthor;
		} catch (SQLException x) {
			throw new DbReferenceException(author,"getAuthor",x);
		}
	}
	public int addAuthor(AuthorEntry author) throws DbReferenceException {
		try {
			stmt.executeUpdate(
					"INSERT INTO author (idauthor,name) VALUES (null,'"+
					author.getName() + "');"
					);
			author.setId(getAutoGeneratedKey(stmt));
			return author.getId();
		} catch (SQLException x) {
			throw new DbReferenceException(author,"searchAuthor",x);
		}
	}
	public int getAuthors(int idref,AuthorEntries authors) throws DbReferenceException {
		try {
			ResultSet rsa = stmt.executeQuery(
					"SELECT idref,author.idauthor,name from ref_authors,author where idref =" + 
					idref  +
					" and author.idauthor=ref_authors.idauthor" +
					AMBIT_smtdelimiter
					);
			while (rsa.next()) {
				if (authors == null) authors = new AuthorEntries();
				AuthorEntry author = new AuthorEntry(rsa.getString(3),rsa.getInt(2));
				authors.addItem(author);
			}
			rsa.close();
			return authors.size();
		} catch (SQLException x) {
			throw new DbReferenceException(authors,"getAuthors",x);
		}
	}
	public int getReference(int idref, LiteratureEntry entry) throws DbReferenceException {
		int id = -1;
		try {
			ResultSet rs = stmt.executeQuery(
					AMBIT_selectLiterature + " where idref ="+
					idref + " and literature.idjournal = journal.idjournal;");
			if (rs.next()) { 
				id = getLiteratureEntry(rs,entry);
			}
			getAuthors(entry.getId(),entry.getAuthors());
			rs.close();
			return id;
		} catch (SQLException x) {
			throw new DbReferenceException(entry,"getReference",x);
		}
	}
	protected int getLiteratureEntry(ResultSet rs, LiteratureEntry entry) throws DbReferenceException {
		try {
			int id = rs.getInt(1);
			entry.setId(id);
			entry.setName(rs.getString(3));
			entry.setWWW(rs.getString(4));
			entry.setVolume(rs.getString(5));
			entry.setPages(rs.getString(6));
			entry.setYear(rs.getInt(7));
			
			JournalEntry journal = entry.getJournal();
			journal.setId(rs.getInt(2));
			journal.setAbbreviation(rs.getString(8));
			journal.setName(rs.getString(9));
			journal.setPublisher(rs.getString(10));
			journal.setCity(rs.getString(11));
				
			return id;
		} catch (SQLException x) {
			throw new DbReferenceException(entry,"getLiteratureEntry",x);
		}
	}
	protected String getCondition(LiteratureEntry entry) {
		String cond = "";
		if (!entry.getName().equals("")) cond += " reference='"+entry.getName()+"' and "; 
		if (!entry.getVolume().equals("")) cond += " volume='"+entry.getVolume()+"' and ";
		if (!entry.getPages().equals("")) cond += " pages='"+entry.getPages()+"' and ";
		if (entry.getYear() > 0 ) cond += " year_pub="+entry.getYear()+" and ";
		
		JournalEntry journal = entry.getJournal();
		if (!journal.getName().equals("")) cond += " name='"+journal.getName()+"' and ";
		if (!journal.getAbbreviation().equals("")) cond += " abbreviation='"+journal.getAbbreviation()+"' and ";
		if (!journal.getPublisher().equals("")) cond += " publisher='"+journal.getPublisher()+"' and ";
		if (!journal.getCity().equals("")) cond += " city='"+journal.getCity()+"' and ";
		return cond;
	}
	
	public LiteratureEntries searchReferences(LiteratureEntry entry) throws DbReferenceException {
		LiteratureEntries lits = null;
		int id = -1;
		try {
			String cond = getCondition(entry);
			ResultSet rs = stmt.executeQuery(
					AMBIT_selectLiterature + " where "+ cond + 
					"literature.idjournal = journal.idjournal;");
			
			while (rs.next()) {
				if (lits == null) lits = new LiteratureEntries() ;
				LiteratureEntry lit = new LiteratureEntry(); 
				if (getLiteratureEntry(rs,lit) > -1) 
					lits.addItem(lit);
			}
			rs.close();
			if (lits != null)
			for (int i = 0; i < lits.size(); i++) {
				LiteratureEntry lit = (LiteratureEntry) lits.getItem(i);
				getAuthors(lit.getId(),lit.getAuthors());
				
			}
			return lits;
		} catch (SQLException x) {
			throw new DbReferenceException(entry,"searchReferences",x);
		}
	}
	
	public int getReference(LiteratureEntry entry) throws DbReferenceException {
		try {
			int id = -1;
			String cond = getCondition(entry);
			String sql = AMBIT_selectLiterature + " where "+ cond +
			"literature.idjournal = journal.idjournal;";
			
			
			ResultSet rs = stmt.executeQuery(sql);
			if (rs.next()) {
				id = getLiteratureEntry(rs,entry);
				if (id > -1) 
					getAuthors(id,entry.getAuthors());
				
			}
			rs.close();
			return id;
		} catch (SQLException x) {
			throw new DbReferenceException(entry,"getReference",x);
		}
	}	
}
