package ambit.database.writers;

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.BitSet;

import org.openscience.cdk.interfaces.IChemObject;

import ambit.data.AmbitUser;
import ambit.data.molecule.MoleculeTools;
import ambit.exceptions.AmbitException;
import ambit.misc.AmbitCONSTANTS;

/**
 * Writes fingerprints generated by {@link ambit.processors.structure.FingerprintGenerator} to database.
 * Expects the fingerprint as a molecule property <br>
 * object.getProperty(AmbitCONSTANTS.Fingerprint)
 * @author Nina Jeliazkova nina@acad.bg
 * <b>Modified</b> Aug 30, 2006
 */
public class FingerprintWriter extends AbstractDbStructureWriter {
	protected long[] h16 = new long[16];

	public FingerprintWriter(Connection connection, AmbitUser user) {
		super(connection, user);
		try {
		    connection.setAutoCommit(false);
		} catch (SQLException x) {
		    logger.error(x);
		}
	}
	
	public int write(int idstructure, IChemObject object) throws AmbitException {
		Object time = object.getProperty(AmbitCONSTANTS.FingerprintTIME);
		if (time == null) throw new AmbitException("Fingerprint does not exist!");
		Object fp = object.getProperty(AmbitCONSTANTS.Fingerprint);
		BitSet bs = null;
		int bitCount = 0;
		int status = -1;
		long fp_time = ((Long) time).longValue();
		if (fp != null) {
			bs = (BitSet) fp;
			MoleculeTools.bitset2Long16(bs,64,h16);
			bitCount = bs.cardinality();
			status = 1;
		}
		try {
			prepareStatement();
			int idsubstance = getIdSubstance(object);
			if (idsubstance > 0) {
				ps.clearParameters();
				ps.setInt(1,idsubstance);
				ps.setLong(2,fp_time);
				ps.setInt(3,bitCount);
				ps.setInt(4,status);
				int o = 5+16;
				for (int i=0; i < h16.length; i++) {
					BigInteger ff= new BigInteger(Long.toHexString(h16[i]),16);
					/*
				    ps.setLong(i+5,h16[i]);
				    ps.setLong(i+o+3,h16[i]);
				    */
					ps.setObject(i+5,ff);
					ps.setObject(i+o+3,ff);
				}
				ps.setLong(o,fp_time);
				ps.setInt(o+1,bitCount);
				ps.setInt(o+2,status);	
				ps.executeUpdate();
				
				records_written++;
				if ((records_written % 1000) == 0)
				    if (!connection.getAutoCommit())
				        connection.commit();
				return idsubstance;
			} else throw new AmbitException("Undefined "+AmbitCONSTANTS.AMBIT_IDSUBSTANCE);
		} catch (SQLException x) {
			throw new AmbitException(x);
		}
		
		
	}

	protected void prepareStatement() throws SQLException {
		if (ps != null) return;
		//String sqlFP1024 = "select idsubstance,time,bc,status,fp1,fp2,fp3,fp4,fp5,fp6,fp7,fp8,fp9,fp10,fp11,fp12,fp13,fp14,fp15,fp16 from fp1024 where idsubstance=(select idsubstance from structure where idstructure=?) order by idsubstance";
		String sqlFP1024 = "INSERT INTO fp1024 (idsubstance,time,bc,status,fp1,fp2,fp3,fp4,fp5,fp6,fp7,fp8,fp9,fp10,fp11,fp12,fp13,fp14,fp15,fp16) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE time=?,bc=?,status=?,fp1=?,fp2=?,fp3=?,fp4=?,fp5=?,fp6=?,fp7=?,fp8=?,fp9=?,fp10=?,fp11=?,fp12=?,fp13=?,fp14=?,fp15=?,fp16=?";
		//1,2,3,4
		//5,6,7,8, 9,10,11,12, 13,14,15,16, 17,18,19,20,
		//21,22,23
		//24,25,26,27,28 ...
		ps = connection.prepareStatement(sqlFP1024,
						ResultSet.TYPE_SCROLL_SENSITIVE,
						ResultSet.CONCUR_UPDATABLE);

	}
	public String toString() {
	    return "Writes fingerprints into database";
	}
}
