package ambit.database.writers;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import org.openscience.cdk.interfaces.IChemObject;

import ambit.data.AmbitUser;
import ambit.database.DbConnection;
import ambit.exceptions.AmbitException;

public class QueryWriter extends AbstractDbStructureWriter {
	protected PreparedStatement psQuery = null;
	protected PreparedStatement psDeleteQuery = null;
	protected QueryResults query;
	protected static final String DELETE_DATASETPERUSER="delete datasets from datasets, dsname,ambituser where datasets.iddsname=dsname.iddsname and dsname.idambituser=ambituser.idambituser and ambituser.mysqluser=?";
	protected static final String DELETE_QUERYPERUSER="delete dsname from dsname,ambituser where dsname.idambituser=ambituser.idambituser and ambituser.mysqluser=?";
	protected static final String DELETE_QUERYRESULT="delete datasets from datasets, dsname where datasets.iddsname=dsname.iddsname and datasets.iddsname=? and idambituser=?";	
	protected static final String INSERT_QUERY="insert into dsname select ?,substring(?,1,32),idambituser,now() from ambituser where mysqluser=? on duplicate key update updated=now()";
	protected static final String INSERT_QUERYRESULT="insert ignore into datasets (iddsname,idstructure) values (?,?)";

	public QueryWriter(DbConnection conn) {
		this(null,conn);
	}

	public QueryWriter(QueryResults query, DbConnection conn) {
		this(query,conn.getConn(),conn.getUser());
	}		
	public QueryWriter(QueryResults query,Connection connection,AmbitUser user) {
		super(connection,user);        
        	setQuery(query);
        try {
            prepareStatement();
        } catch (SQLException x) {
            x.printStackTrace();
            ps = null;
        }
    }
   
	@Override
	public int write(int idstructure, IChemObject object) throws AmbitException {
		try {
			psQuery.clearParameters();
			if (getQuery().getId() < 0) {
				psQuery.setNull(1,Types.INTEGER);
			} else
				psQuery.setInt(1,getQuery().getId());
			psQuery.setString(2,getQuery().getName());
			psQuery.setString(3,getUser().getName());
			psQuery.executeUpdate();
			if (getQuery().getId() < 0) 
				getQuery().setId(getAutoGeneratedKey(psQuery));
			
				
			if (getQuery().getId() < 0) throw new AmbitException("Query not defined");
			else {
				ps.clearParameters();
				ps.setInt(1,getQuery().getId());
				ps.setInt(2, idstructure);
				ps.executeUpdate();
			}
			return getQuery().getId();
		} catch (SQLException x) {
			throw new AmbitException(x);
		}
	}
	/**
	 * Clears all query results stored by this user
	 * @param connection
	 * @throws SQLException
	 */
	public static void deleteQueryPerUser(DbConnection connection) throws SQLException {
		PreparedStatement dqp = connection.getConn().prepareStatement(DELETE_DATASETPERUSER);
		dqp.setString(1,connection.getUser().getName());
		dqp.executeUpdate();
		dqp.close();
		dqp = connection.getConn().prepareStatement(DELETE_QUERYPERUSER);
		dqp.setString(1,connection.getUser().getName());
		dqp.executeUpdate();
		dqp.close();
		dqp = null;
	}	
	public void deleteQuery(QueryResults query) throws SQLException {
		psDeleteQuery.clearParameters();
		psDeleteQuery.setInt(1,query.getId());
		psDeleteQuery.setInt(2,getUser().getId());
		psDeleteQuery.executeUpdate();
	}
	@Override
	protected void prepareStatement() throws SQLException {
		if (ps == null) ps = connection.prepareStatement(INSERT_QUERYRESULT);
		if (psQuery == null) psQuery = connection.prepareStatement(INSERT_QUERY);
		if (psDeleteQuery == null) psDeleteQuery = connection.prepareStatement(DELETE_QUERYRESULT);
		if (!getQuery().isOverwrite()) 
		try {
			deleteQuery(getQuery());
		}	catch (Exception x) {
			logger.error(x);
		}
	}
	@Override
	public void close() throws IOException {
		super.close();
		try {
			getConnection().commit();
			if (ps!=null) ps.close();
			if (psQuery!=null) psQuery.close();
		} catch (Exception x) {
			logger.error(x);
		} finally {
			ps = null;
			psQuery = null;
		}
	}
	public QueryResults getQuery() {
		return query;
	}
	public void setQuery(QueryResults query) {
		this.query = query;
	}
}
